import docker
import threading
from datetime import datetime, timedelta

client = docker.from_env()

# Dictionary to track timers and containers by user
user_containers = {}

def stop_and_remove_container(container_id):
    try:
        container = client.containers.get(container_id)
        print(f"Stopping container {container_id}")
        container.stop()
        container.remove()
    except Exception as e:
        print(f"Error during stopping: {e}")

def launch_user_container(user_id, lifetime_seconds=300):
    # Start a new container
    container = client.containers.run(
        image="your-ttyd-image",              # replace with your image
        name=f"user_{user_id}",
        command=["/entrypoint.sh"],
        detach=True,
        tty=True,
        remove=False,                         # we manually remove after timeout
        labels={"user": str(user_id)},
        mem_limit="256m",
        nano_cpus=200_000_000,
    )

    print(f"Container {container.id[:12]} launched for user {user_id}")

    # Schedule stop and remove
    timer = threading.Timer(
        lifetime_seconds,
        stop_and_remove_container,
        args=[container.id]
    )
    timer.start()

    # Save for possible extension
    user_containers[user_id] = {
        "container_id": container.id,
        "timer": timer,
        "expires_at": datetime.utcnow() + timedelta(seconds=lifetime_seconds)
    }

    return container.id

def extend_user_container(user_id, extra_seconds=300):
    if user_id not in user_containers:
        print("No running container to extend.")
        return False

    # Cancel current timer
    old = user_containers[user_id]
    old["timer"].cancel()

    # Calculate new total time
    new_expiry = old["expires_at"] + timedelta(seconds=extra_seconds)
    seconds_from_now = (new_expiry - datetime.utcnow()).total_seconds()

    # Reschedule
    timer = threading.Timer(
        seconds_from_now,
        stop_and_remove_container,
        args=[old["container_id"]]
    )
    timer.start()

    # Update tracking
    user_containers[user_id]["timer"] = timer
    user_containers[user_id]["expires_at"] = new_expiry

    print(f"Extended container for user {user_id} until {new_expiry}")
    return True
